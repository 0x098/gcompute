local self = {}GCompute.NamespaceBuilder = GCompute.MakeConstructor (self, GCompute.ASTVisitor)function self:ctor (compilationUnit)	self.CompilationUnit = compilationUnit	self.AST = self.CompilationUnit:GetAbstractSyntaxTree ()endfunction self:VisitRoot (blockStatement)	blockStatement:SetNamespace (blockStatement:GetNamespace () or GCompute.NamespaceDefinition ())	blockStatement:GetNamespace ():SetConstructorAST (blockStatement)	blockStatement:GetNamespace ():SetNamespaceType (GCompute.NamespaceType.Global)endfunction self:VisitBlock (blockStatement)	blockStatement:SetNamespace (blockStatement:GetNamespace () or GCompute.NamespaceDefinition ())		local namespace = blockStatement:GetNamespace ()	namespace:SetContainingNamespace (blockStatement:GetParentNamespace ())	namespace:SetConstructorAST (blockStatement)	if namespace:GetNamespaceType () == GCompute.NamespaceType.Unknown then		namespace:SetNamespaceType (GCompute.NamespaceType.Local)	endendfunction self:VisitStatement (statement)	if statement:HasNamespace () then		statement:SetNamespace (statement:GetNamespace () or GCompute.NamespaceDefinition ())		statement:GetNamespace ():SetContainingNamespace (statement:GetParentNamespace ())	end		if statement:Is ("FunctionDeclaration") then		local functionDefinition = statement:GetParentNamespace ():AddFunction (statement:GetName (), statement:GetParameterList ())		functionDefinition:SetReturnType (GCompute.DeferredNameResolution (statement:GetReturnTypeExpression ()))		functionDefinition:SetFunctionDeclaration (statement)		statement:SetFunctionDefinition (functionDefinition)				functionDefinition:GetNamespace ():SetNamespaceType (GCompute.NamespaceType.FunctionRoot)	elseif statement:Is ("AnonymousFunction") then		local functionDefinition = GCompute.FunctionDefinition ("<anonymous-function>", statement:GetParameterList ())		functionDefinition:SetReturnType (GCompute.DeferredNameResolution (statement:GetReturnTypeExpression ()))		functionDefinition:SetFunctionDeclaration (statement)		statement:SetFunctionDefinition (functionDefinition)				functionDefinition:GetNamespace ():SetNamespaceType (GCompute.NamespaceType.FunctionRoot)	elseif statement:Is ("VariableDeclaration") then		if not statement:GetType () then			statement:SetType (GCompute.InferredType ())		end				local variableDefinition = statement:GetParentNamespace ():AddMemberVariable (statement:GetName (), statement:GetType ())		statement:SetVariableDefinition (variableDefinition)	endend