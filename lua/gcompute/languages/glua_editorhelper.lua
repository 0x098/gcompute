local self = EditorHelperfunction self:GetNewLineIndentation (codeEditor, location)	local line = codeEditor:GetDocument ():GetLine (location:GetLine ())	local baseIndentation = string.match (line:GetText (), "^[ \t]*")	local beforeCaret = " " .. line:Sub (1, location:GetCharacter ()) .. " "		local doString       = string.match (beforeCaret, "^.*[^a-zA-Z0-9]do[^a-zA-Z0-9]")       or ""	local repeatString   = string.match (beforeCaret, "^.*[^a-zA-Z0-9]repeat[^a-zA-Z0-9]")   or ""	local thenString     = string.match (beforeCaret, "^.*[^a-zA-Z0-9]then[^a-zA-Z0-9]")     or ""	local functionString = string.match (beforeCaret, "^.*[^a-zA-Z0-9]function[^a-zA-Z0-9]") or ""	local found = doString ~= "" or repeatString ~= "" or thenString ~= "" or functionString ~= ""	local endSearchStart = math.max (		string.len (doString),		string.len (repeatString),		string.len (thenString),		string.len (functionString)	)		local isRepeat = endSearchStart == string.len (repeatString)		if found then		if isRepeat then			if not string.find (beforeCaret, "[^a-zA-Z0-9]until[^a-zA-Z0-9]", endSearchStart) then				return baseIndentation .. "\t"			end		else			if not string.find (beforeCaret, "[^a-zA-Z0-9]end[^a-zA-Z0-9]", endSearchStart) then				return baseIndentation .. "\t"			end		end	end	if beforeCaret:find ("{[^}]*$") then		return baseIndentation .. "\t"	end	return baseIndentationendfunction self:Run (codeEditor, compilerStdOut, compilerStdErr, stdOut, stdErr)	local menu = vgui.Create ("GMenu")	local playerMenu = vgui.Create ("GMenu")	menu:AddOption ("Run on self")		:SetIcon ("gui/g_silkicons/user_go")		:AddEventListener ("Click",			function ()				RunStringEx (codeEditor:GetText (), codeEditor:GetSourceFile ():GetId ())			end		)	menu:AddOption ("Run on server")		:SetIcon ("gui/g_silkicons/server_go")		:AddEventListener ("Click",			function ()				luadev.RunOnServer (codeEditor:GetText ())			end		)	menu:AddOption ("Run on client")		:SetIcon ("gui/g_silkicons/user_go")		:SetSubMenu (playerMenu)	menu:AddOption ("Run on clients")		:SetIcon ("gui/g_silkicons/group_go")		:AddEventListener ("Click",			function ()				luadev.RunOnClients (codeEditor:GetText ())			end		)	menu:AddOption ("Run on shared")		:SetIcon ("gui/g_silkicons/world_go")		:AddEventListener ("Click",			function ()				luadev.RunOnShared (codeEditor:GetText ())			end		)	menu:AddEventListener ("MenuClosed",		function ()			menu:Remove ()			playerMenu:Remove ()		end	)		local players = player.GetAll ()	table.sort (players,		function (a, b)			return a:Name ():lower () < b:Name ():lower ()		end	)	for _, v in ipairs (players) do		playerMenu:AddOption (v:Name ())			:SetIcon (v:IsAdmin () and "gui/g_silkicons/shield_go" or "gui/g_silkicons/user_go")			:AddEventListener ("Click",				function ()					luadev.RunOnClient (codeEditor:GetText (), nil, v)				end			)	end		menu:Open ()end