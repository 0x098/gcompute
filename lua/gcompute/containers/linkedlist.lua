local LinkedList = {}LinkedList.__index = LinkedListlocal LinkedListNode = {}LinkedListNode.__index = LinkedListNodefunction GCompute.Containers.LinkedList ()	local Object = {}	setmetatable (Object, LinkedList)	Object:ctor ()	return Objectend-- Linked listfunction LinkedList:ctor ()	self.First = nil	self.Last = nil	self.Count = 0endfunction LinkedList:LinkedListNode ()	local Object = {}	setmetatable (Object, LinkedListNode)	Object:ctor ()	return Objectendfunction LinkedList:AddAfter (Value)	if Value == nil then		return	end	local LinkedListNode = self:LinkedListNode ()	LinkedListNode.Previous = Value	LinkedListNode.Next = Value.Next		if Value.Next then		Value.Next.Previous = LinkedListNode	end	Value.Next = LinkedListNode		if self.Last == Value then		self.Last = LinkedListNode	end		self.Count = self.Count + 1	LinkedListNode.Value = Value		return LinkedListNodeendfunction LinkedList:AddBefore (Value)	if Value == nil then		return	end	local LinkedListNode = self:LinkedListNode ()	LinkedListNode.Previous = Value.Previous	LinkedListNode.Next = Value		if Value.Previous then		Value.Previous.Next = LinkedListNode	end	Value.Previous = LinkedListNode		if self.First == Value then		self.First = LinkedListNode	end		self.Count = self.Count + 1	LinkedListNode.Value = Value		return LinkedListNodeendfunction LinkedList:AddFirst (Value)	if not self.First then		self.First = self:LinkedListNode ()		self.Last = self.First	else		self.First.Previous = self:LinkedListNode ()		self.First.Previous.Next = self.First		self.First = self.First.Previous	end	self.Count = self.Count + 1	self.First.Value = Value		return self.Firstendfunction LinkedList:AddLast (Value)	if not self.Last then		self.First = self:LinkedListNode ()		self.Last = self.First	else		self.Last.Next = self:LinkedListNode ()		self.Last.Next.Previous = self.Last		self.Last = self.Last.Next	end	self.Count = self.Count + 1	self.Last.Value = Value		return self.Lastendfunction LinkedList:Clear ()	self.First = nil	self.Last = nil	self.Count = 0endfunction LinkedList:GetEnumerator ()	local Node = self.First	return function ()		local Return = Node		if Node then			Node = Node.Next		end		return Return	endendfunction LinkedList:IsEmpty ()	return self.Count == 0endfunction LinkedList:Remove (LinkedListNode)	if not LinkedListNode then		return	end	if LinkedListNode.Previous then		LinkedListNode.Previous.Next = LinkedListNode.Next	end	if LinkedListNode.Next then		LinkedListNode.Next.Previous = LinkedListNode.Previous	end	if self.First == LinkedListNode then		self.First = LinkedListNode.Next	end	if self.Last == LinkedListNode then		self.Last = LinkedListNode.Previous	end	LinkedListNode.Previous = nil	LinkedListNode.Next = nil	self.Count = self.Count - 1endfunction LinkedList:ToString ()	local Content = ""	for LinkedListNode in self:GetEnumerator () do		if Content ~= "" then			Content = Content .. ", "		end		Content = Content .. tostring (LinkedListNode.Value)	end	return tostring (self.Count) .. ": " .. Contentendfunction LinkedListNode:ctor ()	self.Previous = nil	self.Next = nil	self.Value = nilendif CLIENT then	concommand.Add ("gcompute_test_array", function (ply, _, args)		GCompute.ClearDebug ()			local StartTime = SysTime ()		GCompute.PrintDebug ("Testing array:")		local Array = {}		GCompute.PrintDebug ("+2, +3, +5, 0+, -5, -2")		table.insert (Array, 2)		table.insert (Array, 3)		table.insert (Array, 5)		table.insert (Array, 1, 0)		table.remove (Array, 4)		table.remove (Array, 2)		local Contents = ""		for _, Value in pairs (Array) do			if Contents ~= "" then				Contents = Contents .. ", "			end			Contents = Contents .. tostring (Value)		end		GCompute.PrintDebug (Contents)		local EndTime = SysTime ()		GCompute.PrintDebug ("Test 1 took " .. tostring (math.floor ((EndTime - StartTime) * 100000 + 0.5) * 0.01) .. "ms.")	end)	concommand.Add ("gcompute_test_linkedlist", function (ply, _, args)		GCompute.ClearDebug ()			local StartTime = SysTime ()		GCompute.PrintDebug ("Testing linked list:")		local LinkedList = GCompute.Containers.LinkedList ()		GCompute.PrintDebug ("+2, +3, +5, 0+, -5, -2")		local Remove = LinkedList:AddLast (2)		LinkedList:AddLast (3)		local Remove2 = LinkedList:AddLast (5)		LinkedList:AddFirst (0)		LinkedList:Remove (Remove2)		LinkedList:Remove (Remove)		GCompute.PrintDebug (LinkedList:ToString ())		local EndTime = SysTime ()		GCompute.PrintDebug ("Test 1 took " .. tostring (math.floor ((EndTime - StartTime) * 100000 + 0.5) * 0.01) .. "ms.")	end)end