local self = {}GCompute.AliasDefinition = GCompute.MakeConstructor (self, GCompute.ObjectDefinition)--- @param name The name of this alias-- @param objectName The object this alias points to, as a stringfunction self:ctor (name, objectName)	self.ObjectName = objectName	self.Object = nil	self.Metadata = nil		if type (self.ObjectName) == "string" then		self.Object = GCompute.DeferredNameResolution (self.ObjectName)	elseif self.ObjectName:IsDeferredNameResolution () then		self.Object = self.ObjectName		self.ObjectName = self.Object:GetFullName ()	else		GCompute.Error ("AliasDefinition constructed with unknown object.")	endendfunction self:GetMetadata ()	return self.Metadataendfunction self:GetObject ()	return self.Objectend--- Gets whether this object is an alias for another object-- @return A boolean indicating whether this object is an alias for another objectfunction self:IsAlias ()	return trueendfunction self:ResolveTypes (globalNamespace)	if self.Object:IsResolved () then return end		self.Object:Resolve ()	if self.Object:IsResolved () then		local object = self.Object:GetObject ()		if object:IsObjectDefinition () then			if object:IsAlias () then				-- Unwrap aliases				self.Metadata = self.Object:GetType ().Metadata				self.Object = self.Object:GetType ().Object			end		else			self.Metadata = self.Object:GetMetadata ()			self.Object = self.Object:GetType ()		end	endendfunction self:ToString ()	local aliasDefinition = "[Alias] "	aliasDefinition = aliasDefinition .. (self:GetName () or "[Unnamed]")	aliasDefinition = aliasDefinition .. " = " .. self.ObjectName	return aliasDefinitionend