local self = {}GCompute.FunctionResolutionResult = GCompute.MakeConstructor (self)function self:ctor ()	self.Overloads = {}	self.FilteredOverloads = {}endfunction self:AddOverload (functionDefinition)	self.Overloads [#self.Overloads + 1] = functionDefinition	self.FilteredOverloads [#self.FilteredOverloads + 1] = functionDefinitionendfunction self:GetFilteredOverloadCount ()	return #self.FilteredOverloadsendfunction self:GetOverloadCount ()	return #self.Overloadsendfunction self:ToString ()	local functionResolutionResult = "[Function Resolution]\n"	functionResolutionResult = functionResolutionResult .. "{\n"		local filteredOverloads = {}	for _, functionDefinition in ipairs (self.FilteredOverloads) do		filteredOverloads [functionDefinition] = true		functionResolutionResult = functionResolutionResult .. "    [Accepted] " .. functionDefinition:ToString () .. "\n"	end		for _, functionDefinition in ipairs (self.Overloads) do		if not filteredOverloads [functionDefinition] then			functionResolutionResult = functionResolutionResult .. "    [Rejected] " .. functionDefinition:ToString () .. "\n"		end	end		functionResolutionResult = functionResolutionResult .. "}"	return functionResolutionResultend